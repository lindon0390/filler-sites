# Правила проекта автоматизации заполнения формы электронной визы Вьетнама

## Общие принципы
1. Используем TypeScript для типизации всех данных
2. Следуем Page Object Model паттерну для организации кода страниц
3. Все селекторы пишем с помощью XPath для большей стабильности
4. Асинхронные методы именуем с префиксом 'a' (например, aFillForm)
5. Ожидания (expects) задаем с таймаутами для стабильности тестов

## Структура проекта
- `pages/` - Page Object классы для каждой страницы
- `tests/` - Файлы тестов Playwright
- `utils/` - Вспомогательные функции
- `files/` - Изображения и документы для загрузки
- `userData.json` - Данные пользователя для заполнения формы

## Соглашения по именованию
- Локаторы элементов: `eИмяЭлемента` (например, `eInputSurname`)
- Методы действий: `aДействие` (например, `aFillForm`)
- Методы проверки: `aCheckЧто` (например, `aCheckPage`)
- Константы: `ВЕРХНИЙ_РЕГИСТР` (например, `DEFAULT_TIMEOUT`)

## Обработка данных
- Все пользовательские данные типизированы через интерфейс UserData
- Данные хранятся в userData.json и могут быть легко изменены
- Поддержка загрузки файлов изображений (фото и паспорт)

## Требования к тестам
1. Каждый тест должен быть независимым
2. Использовать подходящие таймауты для ожиданий
3. Добавлять паузы (delay) только при необходимости для отладки
4. Логировать важные этапы выполнения
5. Группировать тесты по функциональности

## Безопасность
- Никогда не коммитить реальные персональные данные
- Использовать тестовые данные в userData.json
- Документы и изображения должны быть тестовыми

## Git работа
- Всегда показывать изменения перед коммитом
- Использовать понятные сообщения коммитов
- Коммитить связанные изменения вместе
- **НЕ КОММИТИТЬ без явной команды пользователя**
- Ждать подтверждения от пользователя перед выполнением git commit 