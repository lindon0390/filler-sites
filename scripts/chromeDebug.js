#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Chrome DevTools Protocol
 * –ü–æ–∑–≤–æ–ª—è–µ—Ç –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å Chrome –∏ –ø–æ–ª—É—á–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–π endpoint
 */

const { exec } = require('child_process');
const util = require('util');
const execAsync = util.promisify(exec);

async function checkChromeStatus(port = 9222) {
  try {
    console.log(`üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å Chrome –Ω–∞ –ø–æ—Ä—Ç—É ${port}...`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ä—Å–∏—é –∏ browser endpoint
    const response = await fetch(`http://localhost:${port}/json/version`);
    
    if (!response.ok) {
      throw new Error(`HTTP ${response.status}: ${response.statusText}`);
    }
    
    const info = await response.json();
    
    console.log('‚úÖ Chrome –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è!');
    console.log(`üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±—Ä–∞—É–∑–µ—Ä–µ:`);
    console.log(`   üåê –í–µ—Ä—Å–∏—è: ${info.Browser}`);
    console.log(`   üîß User-Agent: ${info['User-Agent']}`);
    console.log(`   üîå WebSocket Endpoint: ${info.webSocketDebuggerUrl}`);
    
    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤–∫–ª–∞–¥–æ–∫
    const tabsResponse = await fetch(`http://localhost:${port}/json/list`);
    const tabs = await tabsResponse.json();
    const pages = tabs.filter(tab => tab.type === 'page');
    
    console.log(`\nüìÑ –û—Ç–∫—Ä—ã—Ç—ã–µ –≤–∫–ª–∞–¥–∫–∏ (${pages.length}):`);
    pages.forEach((tab, index) => {
      console.log(`   ${index + 1}. ${tab.title}`);
      console.log(`      URL: ${tab.url}`);
      console.log(`      ID: ${tab.id}`);
    });
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É –¥–ª—è .env
    console.log(`\nüí° –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ .env –¥–æ–±–∞–≤—å—Ç–µ:`);
    console.log(`CHROME_CDP_ENDPOINT=${info.webSocketDebuggerUrl}`);
    
    return info.webSocketDebuggerUrl;
  } catch (error) {
    console.error('‚ùå Chrome –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', error.message);
    console.log('\nüí° –í–æ–∑–º–æ–∂–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è:');
    console.log('   1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ Chrome —Å –æ—Ç–ª–∞–¥–æ—á–Ω—ã–º –ø–æ—Ä—Ç–æ–º:');
    console.log('      npm run chrome:debug');
    console.log('   2. –ò–ª–∏ –≤—Ä—É—á–Ω—É—é:');
    console.log('      killall "Google Chrome"');
    console.log('      /Applications/Google\\ Chrome.app/Contents/MacOS/Google\\ Chrome \\');
    console.log('        --remote-debugging-port=9222 \\');
    console.log('        --user-data-dir=/tmp/chrome-debug-profile \\');
    console.log('        --disable-web-security \\');
    console.log('        --disable-features=VizDisplayCompositor');
    console.log('   3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –Ω–µ –∑–∞–Ω—è—Ç –ª–∏ –ø–æ—Ä—Ç:');
    console.log(`      lsof -i :${port}`);
    
    return null;
  }
}

async function killChrome() {
  try {
    console.log('üîÑ –ó–∞–≤–µ—Ä—à–∞–µ–º –≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã Chrome...');
    
    if (process.platform === 'darwin') {
      await execAsync('killall "Google Chrome" 2>/dev/null || true');
    } else if (process.platform === 'win32') {
      await execAsync('taskkill /f /im chrome.exe 2>nul || exit 0');
    } else {
      await execAsync('pkill chrome 2>/dev/null || true');
    }
    
    console.log('‚úÖ Chrome –ø—Ä–æ—Ü–µ—Å—Å—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã');
  } catch (error) {
    console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≤–µ—Ä—à–∏—Ç—å Chrome:', error.message);
  }
}

async function startChromeDebug(port = 9222) {
  try {
    console.log(`üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º Chrome —Å –æ—Ç–ª–∞–¥–æ—á–Ω—ã–º –ø–æ—Ä—Ç–æ–º ${port}...`);
    
    await killChrome();
    
    // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
    await new Promise(resolve => setTimeout(resolve, 1000));
    
    let command;
    if (process.platform === 'darwin') {
      command = `/Applications/Google\\ Chrome.app/Contents/MacOS/Google\\ Chrome \
--remote-debugging-port=${port} \
--user-data-dir=/tmp/chrome-debug-profile \
--disable-web-security \
--disable-features=VizDisplayCompositor &`;
    } else if (process.platform === 'win32') {
      command = `"C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe" ^
--remote-debugging-port=${port} ^
--user-data-dir=C:\\temp\\chrome-debug-profile ^
--disable-web-security ^
--disable-features=VizDisplayCompositor`;
    } else {
      command = `google-chrome \
--remote-debugging-port=${port} \
--user-data-dir=/tmp/chrome-debug-profile \
--disable-web-security \
--disable-features=VizDisplayCompositor &`;
    }
    
    exec(command, (error) => {
      if (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Chrome:', error.message);
        return;
      }
    });
    
    // –ñ–¥—ë–º –∑–∞–ø—É—Å–∫–∞ Chrome
    console.log('‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ Chrome...');
    await new Promise(resolve => setTimeout(resolve, 3000));
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
    await checkChromeStatus(port);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Chrome:', error.message);
  }
}

async function main() {
  const command = process.argv[2];
  const port = parseInt(process.argv[3]) || 9222;
  
  switch (command) {
    case 'status':
    case 'check':
      await checkChromeStatus(port);
      break;
      
    case 'start':
    case 'launch':
      await startChromeDebug(port);
      break;
      
    case 'stop':
    case 'kill':
      await killChrome();
      break;
      
    case 'restart':
      await killChrome();
      await new Promise(resolve => setTimeout(resolve, 2000));
      await startChromeDebug(port);
      break;
      
    default:
      console.log('üõ†Ô∏è Chrome Debug Helper');
      console.log('');
      console.log('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:');
      console.log('  node scripts/chromeDebug.js <command> [port]');
      console.log('');
      console.log('–ö–æ–º–∞–Ω–¥—ã:');
      console.log('  status    - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å Chrome –∏ –ø–æ–∫–∞–∑–∞—Ç—å endpoint');
      console.log('  start     - –ó–∞–ø—É—Å—Ç–∏—Ç—å Chrome —Å –æ—Ç–ª–∞–¥–æ—á–Ω—ã–º –ø–æ—Ä—Ç–æ–º');
      console.log('  stop      - –ó–∞–≤–µ—Ä—à–∏—Ç—å –≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã Chrome');
      console.log('  restart   - –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å Chrome');
      console.log('');
      console.log('–ü—Ä–∏–º–µ—Ä—ã:');
      console.log('  node scripts/chromeDebug.js status');
      console.log('  node scripts/chromeDebug.js start 9222');
      console.log('  node scripts/chromeDebug.js restart');
      break;
  }
}

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
if (require.main === module) {
  main().catch(console.error);
}

module.exports = {
  checkChromeStatus,
  killChrome,
  startChromeDebug
}; 