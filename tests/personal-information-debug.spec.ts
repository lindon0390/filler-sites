import { test, expect } from '@playwright/test';
import { PersonalInformationTestPage } from '../pages/personalInformationTestPage.page';
import { connectAndGetActivePage } from '../utils/browserConnect';
import { getEnvConfig } from '../utils/envConfig';
import * as fs from 'fs';
import * as path from 'path';

test.describe('üîß –û—Ç–ª–∞–¥–∫–∞ –ø–æ–ª–µ–π Personal Information', () => {
  test('üìù –¢–µ—Å—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ–ª–µ–π 1.1, 1.2, 1.3, 1.5 –∏ 1.13', async () => {
    // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É Chrome
    const { page } = await connectAndGetActivePage();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    const pageTitle = await page.title();
    console.log(`‚úÖ –ü–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å –∫ —Å—Ç—Ä–∞–Ω–∏—Ü–µ: "${pageTitle}"`);
    
    // –°–æ–∑–¥–∞—ë–º —ç–∫–∑–µ–º–ø–ª—è—Ä POM
    const personalInfoTestPage = new PersonalInformationTestPage(page);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É E-Visa
    await personalInfoTestPage.aCheckEvisaPage();
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const config = getEnvConfig();
    const userId = config.userId;
    const userDataPath = path.join(__dirname, `../files/${userId}/${userId}.json`);
    const userData = JSON.parse(fs.readFileSync(userDataPath, 'utf8'));
    
    console.log('üîß –ó–∞–≥—Ä—É–∂–µ–Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–∑ .env:');
    console.log(`   üë§ USER_ID: ${process.env.USER_ID}`);
    console.log(`   üîê AUTHORIZATION_NEEDED: ${process.env.AUTHORIZATION_NEEDED}`);
    console.log(`   üåê BROWSER_OPEN: ${process.env.BROWSER_OPEN}`);
    console.log(`   üîå CHROME_CDP_ENDPOINT: ${process.env.CHROME_CDP_ENDPOINT}`);
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä—É–µ–º—ã—Ö –ø–æ–ª–µ–π
    const { surname, middleAndGivenName, dateOfBirthType, hasOtherPassports } = userData.personalInformation;
    
    // –ó–∞–ø–æ–ª–Ω—è–µ–º –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª–µ surname (1.1)
    await personalInfoTestPage.aFillSurnameField(surname);
    const isSurnameCorrect = await personalInfoTestPage.aVerifySurnameField(surname);

    // –ó–∞–ø–æ–ª–Ω—è–µ–º –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª–µ middleAndGivenName (1.2)
    await personalInfoTestPage.aFillMiddleAndGivenNameField(middleAndGivenName);
    const isNameCorrect = await personalInfoTestPage.aVerifyMiddleAndGivenNameField(middleAndGivenName);

    // –ó–∞–ø–æ–ª–Ω—è–µ–º –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª–µ dateOfBirthType (1.3)
    await personalInfoTestPage.aFillDateOfBirthTypeField(dateOfBirthType);
    const isDateTypeCorrect = await personalInfoTestPage.aVerifyDateOfBirthTypeField(dateOfBirthType);

    // –ó–∞–ø–æ–ª–Ω—è–µ–º –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª–µ hasOtherPassports (1.13)
    await personalInfoTestPage.aFillHasOtherPassportsField(hasOtherPassports);
    const isHasOtherPassportsCorrect = await personalInfoTestPage.aVerifyHasOtherPassportsField(hasOtherPassports);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    expect(isSurnameCorrect).toBe(true);
    expect(isNameCorrect).toBe(true);
    expect(isDateTypeCorrect).toBe(true);
    expect(isHasOtherPassportsCorrect).toBe(true);
    
    console.log('‚úÖ –¢–µ—Å—Ç –ø–æ–ª–µ–π 1.1, 1.2, 1.3, 1.5 –∏ 1.13 –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
  });
}); 