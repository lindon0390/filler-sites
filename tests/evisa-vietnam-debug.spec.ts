import { test, expect } from '@playwright/test';

test.describe('Vietnam E-Visa - –û—Ç–ª–∞–¥–∫–∞ —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–≤', () => {
  
  test('–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–∞–π—Ç–∞ –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Å—Ç—Ä–∞–Ω–∏—Ü—ã', async ({ page }) => {
    test.setTimeout(120000); // 2 –º–∏–Ω—É—Ç—ã
    
    console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–∞–π—Ç–∞ Vietnam E-Visa...');
    
    // 1. –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    await page.goto('https://evisa.gov.vn', { timeout: 20000 });
    console.log('‚úÖ –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞');
    
    // –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    await page.screenshot({ 
      path: `test-results/main-page-${Date.now()}.png`, 
      fullPage: true 
    });
    
    // 2. –ò—â–µ–º –∫–Ω–æ–ø–∫—É Login
    const loginButtons = [
      'text=Login',
      'a:has-text("Login")',
      'button:has-text("Login")',
      '[href*="login"]',
      '.login',
      '#login'
    ];
    
    let loginFound = false;
    for (const selector of loginButtons) {
      try {
        const element = page.locator(selector);
        await element.waitFor({ timeout: 3000 });
        console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ Login: ${selector}`);
        await element.click();
        loginFound = true;
        break;
      } catch {
        console.log(`‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ Login: ${selector}`);
      }
    }
    
    if (!loginFound) {
      console.log('‚ö†Ô∏è –ö–Ω–æ–ø–∫–∞ Login –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø–µ—Ä–µ—Ö–æ–¥–∏–º —Å—Ä–∞–∑—É –∫ —Ñ–æ—Ä–º–µ');
      await page.goto('https://evisa.gov.vn/e-visa/foreigners', { timeout: 20000 });
    }
    
    // –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    await page.screenshot({ 
      path: `test-results/after-login-click-${Date.now()}.png`, 
      fullPage: true 
    });
    
    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —á–µ–∫–±–æ–∫—Å–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ —Å–æ–≥–ª–∞—Å–∏—è
    console.log('üîç –ò—â–µ–º —á–µ–∫–±–æ–∫—Å—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ...');
    
    const checkboxSelectors = [
      'input[type="checkbox"]',
      '.ant-checkbox-input',
      '[role="checkbox"]',
      'input[id*="agreement"]',
      'input[id*="confirm"]'
    ];
    
    for (const selector of checkboxSelectors) {
      try {
        const checkboxes = page.locator(selector);
        const count = await checkboxes.count();
        if (count > 0) {
          console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${count} —á–µ–∫–±–æ–∫—Å–æ–≤: ${selector}`);
          
          // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ—Å—Ç–∞–≤–∏—Ç—å –≥–∞–ª–æ—á–∫–∏
          for (let i = 0; i < count; i++) {
            try {
              await checkboxes.nth(i).check({ timeout: 5000 });
              console.log(`‚úÖ –ß–µ–∫–±–æ–∫—Å ${i + 1} –æ—Ç–º–µ—á–µ–Ω`);
            } catch (error) {
              console.log(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ—Ç–∏—Ç—å —á–µ–∫–±–æ–∫—Å ${i + 1}: ${error}`);
            }
          }
          break;
        }
      } catch {
        console.log(`‚ùå –ß–µ–∫–±–æ–∫—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã: ${selector}`);
      }
    }
    
    // 4. –ò—â–µ–º –∫–Ω–æ–ø–∫—É Next
    console.log('üîç –ò—â–µ–º –∫–Ω–æ–ø–∫—É Next...');
    
    const nextSelectors = [
      'button:has-text("Next")',
      'text=Next',
      'input[type="submit"]',
      '.btn-next',
      '[value="Next"]',
      'button[type="submit"]'
    ];
    
    for (const selector of nextSelectors) {
      try {
        const button = page.locator(selector);
        await button.waitFor({ timeout: 3000 });
        
        const isEnabled = await button.isEnabled();
        console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ Next: ${selector}, –∞–∫—Ç–∏–≤–Ω–∞: ${isEnabled}`);
        
        if (isEnabled) {
          await button.click();
          console.log(`‚úÖ –ö–Ω–æ–ø–∫–∞ Next –Ω–∞–∂–∞—Ç–∞`);
          break;
        } else {
          console.log(`‚ö†Ô∏è –ö–Ω–æ–ø–∫–∞ Next –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞`);
        }
      } catch {
        console.log(`‚ùå –ö–Ω–æ–ø–∫–∞ Next –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: ${selector}`);
      }
    }
    
    // –§–∏–Ω–∞–ª—å–Ω—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç
    await page.screenshot({ 
      path: `test-results/final-state-${Date.now()}.png`, 
      fullPage: true 
    });
    
    console.log('üéâ –û—Ç–ª–∞–¥–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç—ã –≤ –ø–∞–ø–∫–µ test-results/');
  });
  
  test('–ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã HTML —Å—Ç—Ä–∞–Ω–∏—Ü—ã', async ({ page }) => {
    test.setTimeout(60000);
    
    await page.goto('https://evisa.gov.vn/e-visa/foreigners', { timeout: 20000 });
    
    // –ü–æ–ª—É—á–∞–µ–º HTML —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    const html = await page.content();
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    const analysis = {
      hasCheckboxes: html.includes('type="checkbox"'),
      hasNextButton: html.includes('Next'),
      hasLoginForm: html.includes('login') || html.includes('Login'),
      hasAntDesign: html.includes('ant-'),
      hasForms: html.includes('<form'),
      hasInputs: html.includes('<input'),
    };
    
    console.log('üìä –ê–Ω–∞–ª–∏–∑ HTML —Å—Ç—Ä—É–∫—Ç—É—Ä—ã:', analysis);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º HTML –≤ —Ñ–∞–π–ª –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    require('fs').writeFileSync(
      `test-results/page-html-${Date.now()}.html`, 
      html
    );
    
    console.log('üìÑ HTML —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ test-results/ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞');
  });
}); 