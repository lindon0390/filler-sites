import { Page, Locator } from '@playwright/test';

export class FieldUtils {
  constructor(private page: Page) {}

  getFieldNumber(fieldName: string): string {
    const fieldNumbers: { [key: string]: string } = {
      // Personal Information
      'surname': '1.1',
      'middleAndGivenName': '1.2',
      'dateOfBirthType': '1.3',
      'dateOfBirth': '1.4',
      'sex': '1.5',
      'nationality': '1.6',
      'identityCard': '1.7',
      'email': '1.8',
      'agreeCreateAccount': '1.9',
      'religion': '1.10',
      'placeOfBirth': '1.11',
      'reEnterEmail': '1.12',
      'hasOtherPassports': '1.13',
      'otherUsedPassports': '1.14',
      'hasMultipleNationalities': '1.15',
      'violationOfVietnameseLaws': '1.16',
      
      // Requested Information
      'visaType': '2.1',
      'validFrom': '2.2',
      'validTo': '2.3',
      
      // Passport Information
      'passportNumber': '3.1',
      'issuingAuthority': '3.2',
      'type': '3.3',
      'dateOfIssue': '3.4',
      'expiryDate': '3.5',
      'holdOtherValidPassports': '3.6',
      'otherValidPassports': '3.7',
      
      // Contact Information
      'permanentResidentialAddress': '4.1',
      'contactAddress': '4.2',
      'telephoneNumber': '4.3',
      'emergencyContact': '4.4',
      
      // Occupation
      'occupation': '5.1',
      'occupationInfo': '5.2',
      'nameOfCompanyAgencySchool': '5.3',
      'positionCourseOfStudy': '5.4',
      'addressOfCompanyAgencySchool': '5.5',
      'companyAgencySchoolPhoneNumber': '5.6',
      
      // Trip Information
      'purposeOfEntry': '6.1',
      'intendedDateOfEntry': '6.2',
      'intendedLengthOfStay': '6.3',
      'phoneNumberInVietnam': '6.4',
      'residentialAddressInVietnam': '6.5',
      'provinceCity': '6.6',
      'wardCommune': '6.7',
      'intendedBorderGateOfEntry': '6.8',
      'intendedBorderGateOfExit': '6.9',
      'committedToDeclareTempResidence': '6.10',
      'hasAgencyOrganizationContact': '6.11',
      'beenToVietnamLastYear': '6.12',
      'vietnamVisitsLastYear': '6.13',
      'hasRelativesInVietnam': '6.14',
      'relativesInVietnam': '6.15',
      
      // Trips Expenses Insurance
      'intendedExpensesUSD': '8.1',
      'didBuyInsurance': '8.2',
      'specifyInsurance': '8.3',
      'whoCoversTripExpenses': '8.4',
      'Payment method': '8.5',
      
      // Declaration
      'agreed': '9.1'
    };
    return fieldNumbers[fieldName] || '?';
  }

  // === –¢–ò–ü 1: –ü–†–û–°–¢–û–ô –ò–ù–ü–£–¢ (simple_input) ===
  
  async fillSimpleTextField(fieldName: string, value: string, locator: Locator): Promise<void> {
    const fieldNumber = this.getFieldNumber(fieldName);
    console.log(`üìù [${fieldNumber}] ${fieldName}: ${value}`);

    try {
      const currentValue = await locator.inputValue();
      if (currentValue === value) {
        console.log(`‚úÖ [${fieldNumber}] –£–∂–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ`);
        return;
      }

      if (currentValue) {
        console.log(`üîÑ [${fieldNumber}] –û—á–∏—â–∞–µ–º –ø–æ–ª–µ (–±—ã–ª–æ: "${currentValue}")`);
        await locator.clear();
      }

      await locator.fill(value);
      console.log(`‚úÖ [${fieldNumber}] –ó–∞–ø–æ–ª–Ω–µ–Ω–æ: ${value}`);
    } catch (error) {
      const errorMessage = error instanceof Error ? error.message : String(error);
      console.log(`‚ùå [${fieldNumber}] –û—à–∏–±–∫–∞: ${errorMessage}`);
      throw error;
    }
  }

  async verifySimpleTextField(fieldName: string, expectedValue: string, locator: Locator): Promise<boolean> {
    const fieldNumber = this.getFieldNumber(fieldName);

    try {
      const currentValue = await locator.inputValue();
      if (currentValue === expectedValue) {
        console.log(`‚úÖ [${fieldNumber}] –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–π–¥–µ–Ω–∞: ${expectedValue}`);
        return true;
      } else {
        console.log(`‚ùå [${fieldNumber}] –ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: –æ–∂–∏–¥–∞–ª–æ—Å—å "${expectedValue}", –ø–æ–ª—É—á–µ–Ω–æ "${currentValue}"`);
        return false;
      }
    } catch (error) {
      console.log(`‚ùå [${fieldNumber}] –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: ${error}`);
      return false;
    }
  }

  // === –¢–ò–ü 2: –í–´–ü–ê–î–ê–Æ–©–ò–ô –°–ü–ò–°–û–ö (dropdown_select) ===
  
  async fillDropdownSelect(fieldName: string, expectedValue: string, locator: Locator): Promise<void> {
    const fieldNumber = this.getFieldNumber(fieldName);
    console.log(`üìù [${fieldNumber}] ${fieldName}: ${expectedValue}`);
    // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –≤—ã–ø–∞–¥–∞—é—â–µ–≥–æ —Å–ø–∏—Å–∫–∞
  }

  async verifyDropdownSelect(fieldName: string, expectedValue: string, locator: Locator): Promise<boolean> {
    const fieldNumber = this.getFieldNumber(fieldName);
    // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –≤—ã–ø–∞–¥–∞—é—â–µ–≥–æ —Å–ø–∏—Å–∫–∞
    return false;
  }

  // === –¢–ò–ü 3: –î–ò–ù–ê–ú–ò–ß–ï–°–ö–ò–ô –°–ü–ò–°–û–ö –° –ü–û–ò–°–ö–û–ú (large_dropdown) ===
  
  async fillLargeDropdownSelect(fieldName: string, expectedValue: string, locator: Locator): Promise<void> {
    const fieldNumber = this.getFieldNumber(fieldName);
    console.log(`üìù [${fieldNumber}] ${fieldName}: ${expectedValue}`);
    // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ —Å–ø–∏—Å–∫–∞ —Å –ø–æ–∏—Å–∫–æ–º (–≤–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ –≤ –∏–Ω–ø—É—Ç, –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ —Å–ø–∏—Å–∫–µ)
  }

  async verifyLargeDropdownSelect(fieldName: string, expectedValue: string, locator: Locator): Promise<boolean> {
    const fieldNumber = this.getFieldNumber(fieldName);
    // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ —Å–ø–∏—Å–∫–∞ —Å –ø–æ–∏—Å–∫–æ–º
    return false;
  }

  // === –¢–ò–ü 4: –ó–ê–í–ò–°–ò–ú–´–ô –î–ò–ù–ê–ú–ò–ß–ï–°–ö–ò–ô –°–ü–ò–°–û–ö –° –ü–û–ò–°–ö–û–ú (dependent_dropdown) ===
  
  async fillDependentDropdownSelect(fieldName: string, expectedValue: string, locator: Locator, dependsOnValue?: string): Promise<void> {
    const fieldNumber = this.getFieldNumber(fieldName);
    console.log(`üìù [${fieldNumber}] ${fieldName}: ${expectedValue} (–∑–∞–≤–∏—Å–∏—Ç –æ—Ç: ${dependsOnValue})`);
    // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ–≥–æ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ —Å–ø–∏—Å–∫–∞ —Å –ø–æ–∏—Å–∫–æ–º (—Ç–∞–∫–æ–π –∂–µ –∫–∞–∫ —Ç–∏–ø 3, –Ω–æ –ø–æ—è–≤–ª—è–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ –¥—Ä—É–≥–æ–º –ø–æ–ª–µ)
  }

  async verifyDependentDropdownSelect(fieldName: string, expectedValue: string, locator: Locator): Promise<boolean> {
    const fieldNumber = this.getFieldNumber(fieldName);
    // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –∑–∞–≤–∏—Å–∏–º–æ–≥–æ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ —Å–ø–∏—Å–∫–∞ —Å –ø–æ–∏—Å–∫–æ–º
    return false;
  }

  // === –¢–ò–ü 5: –ü–û–õ–ï –î–ê–¢–´ (date_picker) ===
  
  async fillDatePicker(fieldName: string, dateValue: string, locator: Locator): Promise<void> {
    const fieldNumber = this.getFieldNumber(fieldName);
    console.log(`üìù [${fieldNumber}] ${fieldName}: ${dateValue}`);
    // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–ª—è –¥–∞—Ç—ã
  }

  async verifyDatePicker(fieldName: string, expectedDate: string, locator: Locator): Promise<boolean> {
    const fieldNumber = this.getFieldNumber(fieldName);
    // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ–ª—è –¥–∞—Ç—ã
    return false;
  }

  // === –¢–ò–ü 6: –†–ê–î–ò–û–ö–ù–û–ü–ö–ê (radio_button) ===
  
  async fillRadioButtonGroup(fieldName: string, expectedValue: string, radioLocators: { [key: string]: Locator }): Promise<void> {
    const fieldNumber = this.getFieldNumber(fieldName);
    console.log(`üìù [${fieldNumber}] ${fieldName}: ${expectedValue}`);

    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—Å–µ—Ö —Ä–∞–¥–∏–æ –∫–Ω–æ–ø–æ–∫
      const currentStates: { [key: string]: boolean } = {};
      for (const [optionName, locator] of Object.entries(radioLocators)) {
        currentStates[optionName] = await locator.isChecked();
      }

      // –õ–æ–≥–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      const stateLog = Object.entries(currentStates)
        .map(([name, checked]) => `${name}=${checked}`)
        .join(', ');
      console.log(`üîç [${fieldNumber}] –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: ${stateLog}`);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É–∂–µ –ª–∏ –≤—ã–±—Ä–∞–Ω–æ –Ω—É–∂–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
      const expectedOption = Object.keys(radioLocators).find(key => key === expectedValue);
      if (expectedOption && currentStates[expectedOption]) {
        console.log(`‚úÖ [${fieldNumber}] –£–∂–µ –≤—ã–±—Ä–∞–Ω–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ: ${expectedValue}`);
        return;
      }

      // –ö–ª–∏–∫–∞–µ–º –Ω–∞ –Ω—É–∂–Ω—É—é —Ä–∞–¥–∏–æ –∫–Ω–æ–ø–∫—É
      const targetLocator = radioLocators[expectedValue];
      if (targetLocator) {
        console.log(`üîÑ [${fieldNumber}] –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –Ω–∞ ${expectedValue}`);
        await targetLocator.click();
        console.log(`‚úÖ [${fieldNumber}] –í—ã–±—Ä–∞–Ω–æ: ${expectedValue}`);
      } else {
        throw new Error(`–õ–æ–∫–∞—Ç–æ—Ä –¥–ª—è –∑–Ω–∞—á–µ–Ω–∏—è "${expectedValue}" –Ω–µ –Ω–∞–π–¥–µ–Ω`);
      }
    } catch (error) {
      const errorMessage = error instanceof Error ? error.message : String(error);
      console.log(`‚ùå [${fieldNumber}] –û—à–∏–±–∫–∞: ${errorMessage}`);
      throw error;
    }
  }

  async verifyRadioButtonGroup(fieldName: string, expectedValue: string, radioLocators: { [key: string]: Locator }): Promise<boolean> {
    const fieldNumber = this.getFieldNumber(fieldName);
    
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—Å–µ—Ö —Ä–∞–¥–∏–æ –∫–Ω–æ–ø–æ–∫
      const currentStates: { [key: string]: boolean } = {};
      for (const [optionName, locator] of Object.entries(radioLocators)) {
        currentStates[optionName] = await locator.isChecked();
      }
      
      // –õ–æ–≥–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      const stateLog = Object.entries(currentStates)
        .map(([name, checked]) => `${name}=${checked}`)
        .join(', ');
      console.log(`üîç [${fieldNumber}] –ü—Ä–æ–≤–µ—Ä–∫–∞: ${stateLog}, –æ–∂–∏–¥–∞–µ—Ç—Å—è: ${expectedValue}`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–±—Ä–∞–Ω–æ –ª–∏ –Ω—É–∂–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
      const expectedOption = Object.keys(radioLocators).find(key => key === expectedValue);
      if (expectedOption && currentStates[expectedOption]) {
        console.log(`‚úÖ [${fieldNumber}] –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–π–¥–µ–Ω–∞: ${expectedValue}`);
        return true;
      } else {
        console.log(`‚ùå [${fieldNumber}] –ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: –æ–∂–∏–¥–∞–ª–æ—Å—å "${expectedValue}", –≤—ã–±—Ä–∞–Ω–æ: ${stateLog}`);
        return false;
      }
    } catch (error) {
      console.log(`‚ùå [${fieldNumber}] –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: ${error}`);
      return false;
    }
  }

  // === –¢–ò–ü 7: –ß–ï–ö–ë–û–ö–° (checkbox) ===
  
  async fillCheckbox(fieldName: string, shouldBeChecked: boolean, locator: Locator): Promise<void> {
    const fieldNumber = this.getFieldNumber(fieldName);
    console.log(`üìù [${fieldNumber}] ${fieldName}: ${shouldBeChecked ? 'checked' : 'unchecked'}`);
    // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —á–µ–∫–±–æ–∫—Å–∞
  }

  async verifyCheckbox(fieldName: string, expectedState: boolean, locator: Locator): Promise<boolean> {
    const fieldNumber = this.getFieldNumber(fieldName);
    // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É —á–µ–∫–±–æ–∫—Å–∞
    return false;
  }

  // === –¢–ò–ü 8: –ó–ê–ì–†–£–ó–ö–ê –§–ê–ô–õ–ê (file_upload) ===
  
  async uploadFile(fieldName: string, filePath: string, locator: Locator): Promise<void> {
    const fieldNumber = this.getFieldNumber(fieldName);
    console.log(`üìù [${fieldNumber}] ${fieldName}: –∑–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ ${filePath}`);
    // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –∑–∞–≥—Ä—É–∑–∫—É —Ñ–∞–π–ª–∞
  }

  async verifyFileUpload(fieldName: string, expectedFileName: string, locator: Locator): Promise<boolean> {
    const fieldNumber = this.getFieldNumber(fieldName);
    // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞
    return false;
  }
} 