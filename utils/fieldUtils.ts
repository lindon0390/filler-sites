import { Locator, Page } from '@playwright/test';

export interface FieldUtils {
  page: Page;
}

export class FieldUtils {
  constructor(private page: Page) {}

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –Ω–æ–º–µ—Ä –ø–æ–ª—è –∏–∑ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
   */
  getFieldNumber(fieldName: string): string {
    const fieldNumbers: { [key: string]: string } = {
      'surname': '1.1',
      'middleAndGivenName': '1.2',
      'dateOfBirthType': '1.3',
      'dateOfBirth': '1.4',
      'sex': '1.5',
      'nationality': '1.6',
      'identityCard': '1.7',
      'email': '1.8',
      'agreeCreateAccount': '1.9',
      'religion': '1.10',
      'placeOfBirth': '1.11',
      'reEnterEmail': '1.12'
    };
    return fieldNumbers[fieldName] || '?';
  }

  /**
   * –ó–∞–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ—Å—Ç–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ
   */
  async fillSimpleTextField(fieldName: string, value: string, locator: Locator): Promise<void> {
    const fieldNumber = this.getFieldNumber(fieldName);
    console.log(`üìù [${fieldNumber}] ${fieldName}: ${value}`);
    
    try {
      await locator.waitFor({ state: 'visible', timeout: 5000 });
      const beforeValue = await locator.inputValue();
      
      if (beforeValue === value) {
        console.log(`‚úÖ [${fieldNumber}] –£–∂–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ`);
        return;
      }
      
      if (beforeValue !== '') {
        console.log(`‚ö†Ô∏è [${fieldNumber}] –°–æ–¥–µ—Ä–∂–∏—Ç: "${beforeValue}" ‚Üí –æ—á–∏—â–∞–µ–º`);
        await locator.clear();
      }
      
      await locator.fill(value);
      const afterFillValue = await locator.inputValue();
      
      if (afterFillValue === value) {
        console.log(`‚úÖ [${fieldNumber}] –ó–∞–ø–æ–ª–Ω–µ–Ω–æ: ${value}`);
      } else {
        console.log(`‚ùå [${fieldNumber}] –û—à–∏–±–∫–∞: –æ–∂–∏–¥–∞–ª–æ—Å—å "${value}", –ø–æ–ª—É—á–µ–Ω–æ "${afterFillValue}"`);
      }
    } catch (error) {
      const errorMessage = error instanceof Error ? error.message : String(error);
      console.log(`‚ùå [${fieldNumber}] –û—à–∏–±–∫–∞: ${errorMessage}`);
      throw error;
    }
  }

  /**
   * –ó–∞–ø–æ–ª–Ω–∏—Ç—å —Ä–∞–¥–∏–æ –∫–Ω–æ–ø–∫—É
   */
  async fillRadioButton(fieldName: string, value: string, locator: Locator): Promise<void> {
    const fieldNumber = this.getFieldNumber(fieldName);
    console.log(`üìù [${fieldNumber}] ${fieldName}: ${value}`);
    
    try {
      await locator.waitFor({ state: 'visible', timeout: 5000 });
      const beforeValue = await locator.isChecked();
      
      if (beforeValue && value === 'Full') {
        console.log(`‚úÖ [${fieldNumber}] –£–∂–µ –≤—ã–±—Ä–∞–Ω–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ`);
        return;
      }
      
      if (!beforeValue && value === 'Only year is known') {
        console.log(`‚úÖ [${fieldNumber}] –£–∂–µ –≤—ã–±—Ä–∞–Ω–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ`);
        return;
      }
      
      await locator.click();
      console.log(`‚úÖ [${fieldNumber}] –í—ã–±—Ä–∞–Ω–æ: ${value}`);
    } catch (error) {
      const errorMessage = error instanceof Error ? error.message : String(error);
      console.log(`‚ùå [${fieldNumber}] –û—à–∏–±–∫–∞: ${errorMessage}`);
      throw error;
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–æ—Å—Ç–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ
   */
  async verifySimpleTextField(fieldName: string, expectedValue: string, locator: Locator): Promise<boolean> {
    const fieldNumber = this.getFieldNumber(fieldName);
    
    try {
      const actualValue = await locator.inputValue();
      
      if (actualValue === expectedValue) {
        console.log(`‚úÖ [${fieldNumber}] –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–π–¥–µ–Ω–∞: ${expectedValue}`);
        return true;
      } else {
        console.log(`‚ùå [${fieldNumber}] –ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: "${actualValue}" (–æ–∂–∏–¥–∞–ª–æ—Å—å "${expectedValue}")`);
        return false;
      }
    } catch (error) {
      console.log(`‚ùå [${fieldNumber}] –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: ${error}`);
      return false;
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞–¥–∏–æ –∫–Ω–æ–ø–∫—É
   */
  async verifyRadioButton(fieldName: string, expectedValue: string, locator: Locator): Promise<boolean> {
    const fieldNumber = this.getFieldNumber(fieldName);
    
    try {
      const isChecked = await locator.isChecked();
      
      if (isChecked) {
        console.log(`‚úÖ [${fieldNumber}] –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–π–¥–µ–Ω–∞: ${expectedValue}`);
        return true;
      } else {
        console.log(`‚ùå [${fieldNumber}] –ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: —Ä–∞–¥–∏–æ –∫–Ω–æ–ø–∫–∞ "${expectedValue}" –Ω–µ –≤—ã–±—Ä–∞–Ω–∞`);
        return false;
      }
    } catch (error) {
      console.log(`‚ùå [${fieldNumber}] –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: ${error}`);
      return false;
    }
  }
} 