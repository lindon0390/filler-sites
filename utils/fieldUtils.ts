import { Page, Locator } from '@playwright/test';

export class FieldUtils {
  constructor(private page: Page) {}

  getFieldNumber(fieldName: string): string {
    const fieldNumbers: { [key: string]: string } = {
      'surname': '1.1',
      'middleAndGivenName': '1.2',
      'dateOfBirthType': '1.3',
      'dateOfBirth': '1.4',
      'sex': '1.5',
      'nationality': '1.6',
      'identityCard': '1.7',
      'email': '1.8',
      'agreeCreateAccount': '1.9',
      'religion': '1.10',
      'placeOfBirth': '1.11',
      'reEnterEmail': '1.12',
      'hasOtherPassports': '1.13',
      'otherUsedPassports': '1.14',
      'hasMultipleNationalities': '1.15'
    };
    return fieldNumbers[fieldName] || '?';
  }

  // === –¢–ï–ö–°–¢–û–í–´–ï –ü–û–õ–Ø ===
  
  async fillSimpleTextField(fieldName: string, value: string, locator: Locator): Promise<void> {
    const fieldNumber = this.getFieldNumber(fieldName);
    console.log(`üìù [${fieldNumber}] ${fieldName}: ${value}`);

    try {
      const currentValue = await locator.inputValue();
      if (currentValue === value) {
        console.log(`‚úÖ [${fieldNumber}] –£–∂–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ`);
        return;
      }

      if (currentValue) {
        console.log(`üîÑ [${fieldNumber}] –û—á–∏—â–∞–µ–º –ø–æ–ª–µ (–±—ã–ª–æ: "${currentValue}")`);
        await locator.clear();
      }

      await locator.fill(value);
      console.log(`‚úÖ [${fieldNumber}] –ó–∞–ø–æ–ª–Ω–µ–Ω–æ: ${value}`);
    } catch (error) {
      const errorMessage = error instanceof Error ? error.message : String(error);
      console.log(`‚ùå [${fieldNumber}] –û—à–∏–±–∫–∞: ${errorMessage}`);
      throw error;
    }
  }

  async verifySimpleTextField(fieldName: string, expectedValue: string, locator: Locator): Promise<boolean> {
    const fieldNumber = this.getFieldNumber(fieldName);

    try {
      const currentValue = await locator.inputValue();
      if (currentValue === expectedValue) {
        console.log(`‚úÖ [${fieldNumber}] –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–π–¥–µ–Ω–∞: ${expectedValue}`);
        return true;
      } else {
        console.log(`‚ùå [${fieldNumber}] –ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: –æ–∂–∏–¥–∞–ª–æ—Å—å "${expectedValue}", –ø–æ–ª—É—á–µ–Ω–æ "${currentValue}"`);
        return false;
      }
    } catch (error) {
      console.log(`‚ùå [${fieldNumber}] –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: ${error}`);
      return false;
    }
  }

  // === –†–ê–î–ò–û –ö–ù–û–ü–ö–ò ===
  
  async fillRadioButtonGroup(fieldName: string, expectedValue: string, radioLocators: { [key: string]: Locator }): Promise<void> {
    const fieldNumber = this.getFieldNumber(fieldName);
    console.log(`üìù [${fieldNumber}] ${fieldName}: ${expectedValue}`);

    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—Å–µ—Ö —Ä–∞–¥–∏–æ –∫–Ω–æ–ø–æ–∫
      const currentStates: { [key: string]: boolean } = {};
      for (const [optionName, locator] of Object.entries(radioLocators)) {
        currentStates[optionName] = await locator.isChecked();
      }

      // –õ–æ–≥–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      const stateLog = Object.entries(currentStates)
        .map(([name, checked]) => `${name}=${checked}`)
        .join(', ');
      console.log(`üîç [${fieldNumber}] –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: ${stateLog}`);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É–∂–µ –ª–∏ –≤—ã–±—Ä–∞–Ω–æ –Ω—É–∂–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
      const expectedOption = Object.keys(radioLocators).find(key => key === expectedValue);
      if (expectedOption && currentStates[expectedOption]) {
        console.log(`‚úÖ [${fieldNumber}] –£–∂–µ –≤—ã–±—Ä–∞–Ω–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ: ${expectedValue}`);
        return;
      }

      // –ö–ª–∏–∫–∞–µ–º –Ω–∞ –Ω—É–∂–Ω—É—é —Ä–∞–¥–∏–æ –∫–Ω–æ–ø–∫—É
      const targetLocator = radioLocators[expectedValue];
      if (targetLocator) {
        console.log(`üîÑ [${fieldNumber}] –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –Ω–∞ ${expectedValue}`);
        await targetLocator.click();
        console.log(`‚úÖ [${fieldNumber}] –í—ã–±—Ä–∞–Ω–æ: ${expectedValue}`);
      } else {
        throw new Error(`–õ–æ–∫–∞—Ç–æ—Ä –¥–ª—è –∑–Ω–∞—á–µ–Ω–∏—è "${expectedValue}" –Ω–µ –Ω–∞–π–¥–µ–Ω`);
      }
    } catch (error) {
      const errorMessage = error instanceof Error ? error.message : String(error);
      console.log(`‚ùå [${fieldNumber}] –û—à–∏–±–∫–∞: ${errorMessage}`);
      throw error;
    }
  }

  async verifyRadioButtonGroup(fieldName: string, expectedValue: string, radioLocators: { [key: string]: Locator }): Promise<boolean> {
    const fieldNumber = this.getFieldNumber(fieldName);

    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—Å–µ—Ö —Ä–∞–¥–∏–æ –∫–Ω–æ–ø–æ–∫
      const currentStates: { [key: string]: boolean } = {};
      for (const [optionName, locator] of Object.entries(radioLocators)) {
        currentStates[optionName] = await locator.isChecked();
      }

      // –õ–æ–≥–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      const stateLog = Object.entries(currentStates)
        .map(([name, checked]) => `${name}=${checked}`)
        .join(', ');
      console.log(`üîç [${fieldNumber}] –ü—Ä–æ–≤–µ—Ä–∫–∞: ${stateLog}, –æ–∂–∏–¥–∞–µ—Ç—Å—è: ${expectedValue}`);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–±—Ä–∞–Ω–æ –ª–∏ –Ω—É–∂–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
      const expectedOption = Object.keys(radioLocators).find(key => key === expectedValue);
      if (expectedOption && currentStates[expectedOption]) {
        console.log(`‚úÖ [${fieldNumber}] –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–π–¥–µ–Ω–∞: ${expectedValue}`);
        return true;
      } else {
        console.log(`‚ùå [${fieldNumber}] –ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: –æ–∂–∏–¥–∞–ª–æ—Å—å "${expectedValue}", –≤—ã–±—Ä–∞–Ω–æ: ${stateLog}`);
        return false;
      }
    } catch (error) {
      console.log(`‚ùå [${fieldNumber}] –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: ${error}`);
      return false;
    }
  }
} 