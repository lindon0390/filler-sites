import { chromium, Browser, BrowserContext, Page } from '@playwright/test';

/**
 * –ü–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É Chrome –±—Ä–∞—É–∑–µ—Ä—É
 */
export async function connectToExistingChrome(port: number = 9222): Promise<Browser> {
  console.log(`üîó –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Chrome –Ω–∞ –ø–æ—Ä—Ç—É ${port}...`);
  
  try {
    const browser = await chromium.connectOverCDP(`http://localhost:${port}`);
    console.log('‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É Chrome');
    return browser;
  } catch (error) {
    console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Chrome:', error);
    console.log('üí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ Chrome –∑–∞–ø—É—â–µ–Ω —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º --remote-debugging-port=9222');
    console.log('üí° –ö–æ–º–∞–Ω–¥–∞: npm run chrome:debug');
    throw error;
  }
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –∏–ª–∏ —Å–æ–∑–¥–∞—ë—Ç –Ω–æ–≤—É—é –≤–∫–ª–∞–¥–∫—É –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º –±—Ä–∞—É–∑–µ—Ä–µ
 */
export async function getOrCreatePage(browser: Browser): Promise<Page> {
  console.log('üìÑ –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –±—Ä–∞—É–∑–µ—Ä–∞...');
  
  // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç—ã
  const contexts = browser.contexts();
  
  if (contexts.length > 0) {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
    const context = contexts[0];
    const pages = context.pages();
    
    if (pages.length > 0) {
      console.log('‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –≤–∫–ª–∞–¥–∫—É');
      return pages[0];
    } else {
      console.log('üìÑ –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ');
      return await context.newPage();
    }
  } else {
    // –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏ —Å—Ç—Ä–∞–Ω–∏—Ü—É
    console.log('üìÑ –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏ —Å—Ç—Ä–∞–Ω–∏—Ü—É');
    const context = await browser.newContext();
    return await context.newPage();
  }
}

/**
 * –ü–æ–ª–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Chrome –∏ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
 */
export async function connectAndGetPage(port: number = 9222): Promise<{ browser: Browser; page: Page }> {
  const browser = await connectToExistingChrome(port);
  const page = await getOrCreatePage(browser);
  
  console.log('üéØ –ì–æ—Ç–æ–≤–æ! –ú–æ–∂–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º Chrome');
  return { browser, page };
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –¥–æ—Å—Ç—É–ø–µ–Ω –ª–∏ Chrome –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
 */
export async function checkChromeAvailability(port: number = 9222): Promise<boolean> {
  try {
    const response = await fetch(`http://localhost:${port}/json/version`);
    if (response.ok) {
      const info = await response.json();
      console.log(`‚úÖ Chrome –¥–æ—Å—Ç—É–ø–µ–Ω: ${info.Browser}`);
      return true;
    }
  } catch (error) {
    console.log(`‚ùå Chrome –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${port}`);
  }
  return false;
} 