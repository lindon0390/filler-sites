import { chromium, Browser, BrowserContext, Page } from '@playwright/test';
import { getChromeCdpEndpoint } from './envConfig';

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã–π browser endpoint –∏–∑ Chrome DevTools API
 */
async function getBrowserEndpoint(port: number = 9222): Promise<string> {
  try {
    const response = await fetch(`http://localhost:${port}/json/version`);
    if (response.ok) {
      const info = await response.json();
      return info.webSocketDebuggerUrl;
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è browser endpoint:', error);
  }
  throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å browser endpoint —Å –ø–æ—Ä—Ç–∞ ${port}`);
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤–∫–ª–∞–¥–æ–∫ –∏–∑ Chrome
 */
async function getActiveTabs(port: number = 9222): Promise<any[]> {
  try {
    const response = await fetch(`http://localhost:${port}/json/list`);
    if (response.ok) {
      const tabs = await response.json();
      // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –æ–±—ã—á–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–Ω–µ service workers)
      return tabs.filter((tab: any) => tab.type === 'page');
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –≤–∫–ª–∞–¥–æ–∫:', error);
  }
  return [];
}

/**
 * –ü–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É Chrome –±—Ä–∞—É–∑–µ—Ä—É
 */
export async function connectToExistingChrome(port: number = 9222): Promise<Browser> {
  console.log(`üîó –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Chrome –Ω–∞ –ø–æ—Ä—Ç—É ${port}...`);
  
  try {
    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —É–∫–∞–∑–∞–Ω –ª–∏ endpoint –≤ .env
    let browserEndpoint = getChromeCdpEndpoint();
    
    if (browserEndpoint) {
      console.log(`üîß –ò—Å–ø–æ–ª—å–∑—É–µ–º endpoint –∏–∑ .env: ${browserEndpoint}`);
    } else {
      // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π browser endpoint –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
      browserEndpoint = await getBrowserEndpoint(port);
      console.log(`üîç –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω endpoint: ${browserEndpoint}`);
    }
    
    // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è —á–µ—Ä–µ–∑ WebSocket endpoint
    const browser = await chromium.connectOverCDP(browserEndpoint);
    console.log('‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É Chrome');
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–∫–ª–∞–¥–∫–∞—Ö
    const tabs = await getActiveTabs(port);
    console.log(`üìã –ù–∞–π–¥–µ–Ω–æ –≤–∫–ª–∞–¥–æ–∫: ${tabs.length}`);
    tabs.forEach((tab, index) => {
      console.log(`  ${index + 1}. ${tab.title} - ${tab.url}`);
    });
    
    return browser;
  } catch (error) {
    console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Chrome:', error);
    console.log('üí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ Chrome –∑–∞–ø—É—â–µ–Ω —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º --remote-debugging-port=9222');
    console.log('üí° –ö–æ–º–∞–Ω–¥–∞: npm run chrome:debug');
    throw error;
  }
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –∏–ª–∏ —Å–æ–∑–¥–∞—ë—Ç –Ω–æ–≤—É—é –≤–∫–ª–∞–¥–∫—É –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º –±—Ä–∞—É–∑–µ—Ä–µ
 */
export async function getOrCreatePage(browser: Browser): Promise<Page> {
  console.log('üìÑ –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –±—Ä–∞—É–∑–µ—Ä–∞...');
  
  try {
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç—ã
    const contexts = browser.contexts();
    console.log(`üîç –ù–∞–π–¥–µ–Ω–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–≤: ${contexts.length}`);
    
    if (contexts.length > 0) {
      // –ò—â–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º–∏
      for (const context of contexts) {
        const pages = context.pages();
        console.log(`üìÑ –°—Ç—Ä–∞–Ω–∏—Ü –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ: ${pages.length}`);
        
        if (pages.length > 0) {
          // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—É—é –¥–æ—Å—Ç—É–ø–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
          const page = pages[0];
          console.log(`‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –≤–∫–ª–∞–¥–∫—É: ${await page.title()}`);
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∞–∫—Ç–∏–≤–Ω–∞
          try {
            await page.evaluate(() => document.readyState);
            return page;
          } catch (error) {
            console.log('‚ö†Ô∏è –°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞, —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é');
          }
        }
      }
      
      // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã, —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é –≤ –ø–µ—Ä–≤–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
      console.log('üìÑ –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ');
      return await contexts[0].newPage();
    } else {
      // –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏ —Å—Ç—Ä–∞–Ω–∏—Ü—É
      console.log('üìÑ –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏ —Å—Ç—Ä–∞–Ω–∏—Ü—É');
      const context = await browser.newContext({
        // –û—Ç–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        // —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–µ—Å—Å–∏—é –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º –±—Ä–∞—É–∑–µ—Ä–µ
      });
      return await context.newPage();
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º–∏:', error);
    
    // Fallback: —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
    console.log('üîÑ –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤ –∫–∞—á–µ—Å—Ç–≤–µ fallback');
    const context = await browser.newContext();
    return await context.newPage();
  }
}

/**
 * –ü–æ–ª–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Chrome –∏ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
 */
export async function connectAndGetPage(port: number = 9222): Promise<{ browser: Browser; page: Page }> {
  const browser = await connectToExistingChrome(port);
  const page = await getOrCreatePage(browser);
  
  console.log('üéØ –ì–æ—Ç–æ–≤–æ! –ú–æ–∂–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º Chrome');
  return { browser, page };
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –¥–æ—Å—Ç—É–ø–µ–Ω –ª–∏ Chrome –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
 */
export async function checkChromeAvailability(port: number = 9222): Promise<boolean> {
  try {
    const response = await fetch(`http://localhost:${port}/json/version`);
    if (response.ok) {
      const info = await response.json();
      console.log(`‚úÖ Chrome –¥–æ—Å—Ç—É–ø–µ–Ω: ${info.Browser}`);
      
      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –≤–∫–ª–∞–¥–æ–∫
      const tabs = await getActiveTabs(port);
      console.log(`üìã –î–æ—Å—Ç—É–ø–Ω–æ –≤–∫–ª–∞–¥–æ–∫: ${tabs.length}`);
      
      return true;
    }
  } catch (error) {
    console.log(`‚ùå Chrome –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${port}:`, error.message);
  }
  return false;
} 