import { chromium, Browser, BrowserContext, Page } from '@playwright/test';
import { getChromeCdpEndpoint } from './envConfig';

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã–π browser endpoint –∏–∑ Chrome DevTools API
 */
async function getBrowserEndpoint(port: number = 9222): Promise<string> {
  try {
    const response = await fetch(`http://localhost:${port}/json/version`);
    if (response.ok) {
      const info = await response.json();
      return info.webSocketDebuggerUrl;
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è browser endpoint:', error);
  }
  throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å browser endpoint —Å –ø–æ—Ä—Ç–∞ ${port}`);
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤–∫–ª–∞–¥–æ–∫ –∏–∑ Chrome
 */
async function getActiveTabs(port: number = 9222): Promise<any[]> {
  try {
    const response = await fetch(`http://localhost:${port}/json/list`);
    if (response.ok) {
      const tabs = await response.json();
      // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –æ–±—ã—á–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–Ω–µ service workers)
      return tabs.filter((tab: any) => tab.type === 'page');
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –≤–∫–ª–∞–¥–æ–∫:', error);
  }
  return [];
}

/**
 * –ü–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É Chrome –±—Ä–∞—É–∑–µ—Ä—É
 */
export async function connectToExistingChrome(port: number = 9222): Promise<Browser> {
  try {
    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —É–∫–∞–∑–∞–Ω –ª–∏ endpoint –≤ .env
    let browserEndpoint = getChromeCdpEndpoint();
    
    if (!browserEndpoint) {
      // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π browser endpoint –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
      browserEndpoint = await getBrowserEndpoint(port);
    }
    
    // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è —á–µ—Ä–µ–∑ WebSocket endpoint
    const browser = await chromium.connectOverCDP(browserEndpoint);
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å –∫ Chrome');
    
    return browser;
  } catch (error) {
    console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Chrome:', error);
    console.log('üí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ Chrome –∑–∞–ø—É—â–µ–Ω —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º --remote-debugging-port=9222');
    console.log('üí° –ö–æ–º–∞–Ω–¥–∞: npm run chrome:debug');
    throw error;
  }
}

/**
 * –ü–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∫ –∞–∫—Ç–∏–≤–Ω–æ–π –≤–∫–ª–∞–¥–∫–µ –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º –±—Ä–∞—É–∑–µ—Ä–µ
 */
export async function connectToActiveTab(port: number = 9222): Promise<Page> {
  try {
    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≤–∫–ª–∞–¥–æ–∫ —á–µ—Ä–µ–∑ CDP API
    const response = await fetch(`http://localhost:${port}/json/list`);
    const tabs = await response.json();
    
    // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ –∏—â–µ–º –≤–∫–ª–∞–¥–∫—É —Å E-Visa —Ñ–æ—Ä–º–æ–π
    let activeTab = tabs.find((tab: any) => 
      tab.type === 'page' && 
      tab.url && 
      tab.url.includes('evisa.gov.vn') &&
      tab.webSocketDebuggerUrl
    );
    
    // –ï—Å–ª–∏ E-Visa –≤–∫–ª–∞–¥–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –∏—â–µ–º –ª—é–±—É—é –∞–∫—Ç–∏–≤–Ω—É—é –≤–∫–ª–∞–¥–∫—É
    if (!activeTab) {
      activeTab = tabs.find((tab: any) => 
        tab.type === 'page' && 
        tab.url && 
        !tab.url.includes('chrome-devtools://') &&
        !tab.url.includes('about:blank') &&
        tab.webSocketDebuggerUrl
      );
    }
    
    if (!activeTab) {
      throw new Error('–ù–µ –Ω–∞–π–¥–µ–Ω–∞ –∞–∫—Ç–∏–≤–Ω–∞—è –≤–∫–ª–∞–¥–∫–∞ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è');
    }
    
    // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±—Ä–∞—É–∑–µ—Ä—É –≤ —Ü–µ–ª–æ–º –∏ –∏—â–µ–º –Ω—É–∂–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    const browserEndpoint = await getBrowserEndpoint(port);
    const browser = await chromium.connectOverCDP(browserEndpoint);
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç—ã –∏ –∏—â–µ–º –Ω—É–∂–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    const contexts = browser.contexts();
    
    // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–∑ –≤—Å–µ—Ö –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–≤
    const allPages = [];
    for (const context of contexts) {
      const pages = context.pages();
      allPages.push(...pages);
    }
    
    // –ò—â–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å evisa.gov.vn
    for (const page of allPages) {
      try {
        const pageUrl = page.url();
        
        if (pageUrl.includes('evisa.gov.vn')) {
          try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–æ—Å—Ç—É–ø–Ω–∞
            await page.evaluate(() => document.readyState);
            const title = await page.title();
            console.log(`‚úÖ –ü–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å –∫ —Å—Ç—Ä–∞–Ω–∏—Ü–µ: "${title}"`);
            return page;
          } catch (evalError) {
            continue;
          }
        }
      } catch (error) {
        continue;
      }
    }
    
    // –ï—Å–ª–∏ E-Visa —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –±–µ—Ä–µ–º –ª—é–±—É—é –∞–∫—Ç–∏–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    for (const page of allPages) {
      try {
        const pageUrl = page.url();
        if (!pageUrl.includes('about:blank') && !pageUrl.includes('chrome-devtools://')) {
          await page.evaluate(() => document.readyState);
          const title = await page.title();
          console.log(`‚úÖ –ü–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å –∫ —Å—Ç—Ä–∞–Ω–∏—Ü–µ: "${title}"`);
          return page;
        }
      } catch (error) {
        continue;
      }
    }
    
    throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∞–∫—Ç–∏–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å URL: ${activeTab.url}`);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ –∞–∫—Ç–∏–≤–Ω–æ–π –≤–∫–ª–∞–¥–∫–µ:', error);
    throw error;
  }
}

/**
 * –£–ø—Ä–æ—â–µ–Ω–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∞–∫—Ç–∏–≤–Ω–æ–π –≤–∫–ª–∞–¥–∫–µ –≤ Chrome
 */
export async function connectAndGetActivePage(port: number = 9222): Promise<{ browser: Browser; page: Page }> {
  const page = await connectToActiveTab(port);
  
  // –ü–æ–ª—É—á–∞–µ–º –±—Ä–∞—É–∑–µ—Ä –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  const browser = page.context().browser();
  if (!browser) {
    throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –±—Ä–∞—É–∑–µ—Ä –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã');
  }
  
  return { browser, page };
}

/**
 * –ü–æ–ª–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Chrome –∏ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã (—É—Å—Ç–∞—Ä–µ–≤—à–∏–π)
 * @deprecated –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ connectAndGetActivePage –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∞–∫—Ç–∏–≤–Ω–æ–π –≤–∫–ª–∞–¥–∫–µ
 */
export async function connectAndGetPage(port: number = 9222): Promise<{ browser: Browser; page: Page }> {
  console.log('‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ: –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —É—Å—Ç–∞—Ä–µ–≤—à–∏–π –º–µ—Ç–æ–¥ connectAndGetPage');
  return connectAndGetActivePage(port);
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –¥–æ—Å—Ç—É–ø–µ–Ω –ª–∏ Chrome –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
 */
export async function checkChromeAvailability(port: number = 9222): Promise<boolean> {
  try {
    const response = await fetch(`http://localhost:${port}/json/version`);
    if (response.ok) {
      const info = await response.json();
      console.log(`‚úÖ Chrome –¥–æ—Å—Ç—É–ø–µ–Ω: ${info.Browser}`);
      
      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –≤–∫–ª–∞–¥–æ–∫
      const tabs = await getActiveTabs(port);
      console.log(`üìã –î–æ—Å—Ç—É–ø–Ω–æ –≤–∫–ª–∞–¥–æ–∫: ${tabs.length}`);
      
      return true;
    }
  } catch (error) {
    console.log(`‚ùå Chrome –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${port}:`, error instanceof Error ? error.message : error);
  }
  return false;
} 