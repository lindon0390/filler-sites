import { Page, Locator } from '@playwright/test';
import { FieldUtils } from '../utils/fieldUtils';

export class ApplicationFormTestPage {
  private fieldUtils: FieldUtils;

  // === –õ–û–ö–ê–¢–û–†–´ –ü–û–õ–ï–ô –í–°–ï–ô –ê–ù–ö–ï–¢–´ ===
  // 1. PERSONAL INFORMATION
  // 1.1 - 1.2: –¢–µ–∫—Å—Ç–æ–≤—ã–µ –ø–æ–ª—è
  private eSurnameField: Locator;
  private eMiddleAndGivenNameField: Locator;

  // 1.3: –†–∞–¥–∏–æ –∫–Ω–æ–ø–∫–∏ dateOfBirthType
  private eDateOfBirthFullRadio: Locator;
  private eDateOfBirthYearOnlyRadio: Locator;

  // 1.4: –ü–æ–ª–µ –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è (–ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ)
  // private eDateOfBirthField: Locator;

  // 1.5: –ü–æ–ª–µ Sex (Ant Design Select)
  private eSexSelect: Locator;

  // 1.6: –ü–æ–ª–µ Nationality (–±–æ–ª—å—à–æ–π –≤—ã–ø–∞–¥–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫)
  private eNationalitySelect: Locator;

  // 1.7: –ü–æ–ª–µ Identity Card
  // private eIdentityCardField: Locator;

  // 1.8: –ü–æ–ª–µ Email
  // private eEmailField: Locator;

  // 1.9: –ß–µ–∫–±–æ–∫—Å Agree create account
  // private eAgreeCreateAccountCheckbox: Locator;

  // 1.10: –ü–æ–ª–µ Religion
  // private eReligionField: Locator;

  // 1.11: –ü–æ–ª–µ Place of birth
  // private ePlaceOfBirthField: Locator;

  // 1.12: –ü–æ–ª–µ Re-enter email
  // private eReEnterEmailField: Locator;

  // 1.13: –†–∞–¥–∏–æ –∫–Ω–æ–ø–∫–∏ hasOtherPassports
  private eHasOtherPassportsNoRadio: Locator;
  private eHasOtherPassportsYesRadio: Locator;

  // 1.14: –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è —Ç–∞–±–ª–∏—Ü–∞ Other used passports (–≤–∏–¥–Ω–∞ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ hasOtherPassports = "Yes")
  // private eOtherUsedPassportsTable: Locator;

  // 1.15: –†–∞–¥–∏–æ –∫–Ω–æ–ø–∫–∏ hasMultipleNationalities
  // private eHasMultipleNationalitiesYesRadio: Locator;
  // private eHasMultipleNationalitiesNoRadio: Locator;

  // 1.16: –†–∞–¥–∏–æ –∫–Ω–æ–ø–∫–∏ violationOfVietnameseLaws
  // private eViolationOfVietnameseLawsYesRadio: Locator;
  // private eViolationOfVietnameseLawsNoRadio: Locator;

  // 3. PASSPORT INFORMATION
  // 3.3: –ü–æ–ª–µ Type (—Ç–∏–ø –ø–∞—Å–ø–æ—Ä—Ç–∞) - –≤—ã–ø–∞–¥–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫
  private ePassportTypeSelect: Locator;

  // 5. OCCUPATION
  // 5.1: –ü–æ–ª–µ Occupation (–∑–∞–Ω—è—Ç–æ—Å—Ç—å) - –≤—ã–ø–∞–¥–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫
  private eOccupationSelect: Locator;

  constructor(private page: Page) {
    this.fieldUtils = new FieldUtils(page);
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–∫–∞—Ç–æ—Ä–æ–≤ - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã
    // 1. PERSONAL INFORMATION
    this.eSurnameField = page.getByRole('textbox', { name: 'Surname (Last name)' });
    this.eMiddleAndGivenNameField = page.getByRole('textbox', { name: 'Middle and given name' });
    
    // –†–∞–¥–∏–æ –∫–Ω–æ–ø–∫–∏ dateOfBirthType
    this.eDateOfBirthFullRadio = page.getByRole('radio', { name: 'Full' });
    this.eDateOfBirthYearOnlyRadio = page.getByRole('radio', { name: 'Only year is known' });
    
    // –ü–æ–ª–µ Sex (Ant Design Select)
    this.eSexSelect = page.getByRole('combobox', { name: 'Sex *' });
    
    // –ü–æ–ª–µ Nationality (Ant Design Select)
    this.eNationalitySelect = page.getByRole('combobox', { name: 'Nationality *' });
    
    // –†–∞–¥–∏–æ –∫–Ω–æ–ø–∫–∏ hasOtherPassports - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –ª–æ–∫–∞—Ç–æ—Ä—ã
    this.eHasOtherPassportsYesRadio = page.locator('text=Have you ever used any other passports to enter into Viet Nam?').locator('..').getByRole('radio', { name: 'Yes' });
    this.eHasOtherPassportsNoRadio = page.locator('text=Have you ever used any other passports to enter into Viet Nam?').locator('..').getByRole('radio', { name: 'No' });

    // 3. PASSPORT INFORMATION
    this.ePassportTypeSelect = page.getByRole('combobox', { name: 'Type *' });

    // 5. OCCUPATION
    this.eOccupationSelect = page.getByRole('combobox', { name: 'Occupation' });
  }

  async aCheckEvisaPage(): Promise<void> {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É E-Visa...');
    const pageTitle = await this.page.title();
    if (pageTitle.includes('e-Visa')) {
      console.log('‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ E-Visa –Ω–∞–π–¥–µ–Ω–∞');
    } else {
      throw new Error('–°—Ç—Ä–∞–Ω–∏—Ü–∞ E-Visa –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    }
  }

  // === –ú–ï–¢–û–î–´ –î–õ–Ø 1. PERSONAL INFORMATION ===
  
  // –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç–µ–∫—Å—Ç–æ–≤—ã–º–∏ –ø–æ–ª—è–º–∏
  async aFindSurnameField(): Promise<Locator | null> {
    try {
      const count = await this.eSurnameField.count();
      if (count > 0) {
        console.log(`‚úÖ [${this.fieldUtils.getFieldNumber('surname')}] –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª–µ surname`);
        return this.eSurnameField;
      }
    } catch (error) {
      console.log(`‚ùå [${this.fieldUtils.getFieldNumber('surname')}] –ü–æ–ª–µ surname –Ω–µ –Ω–∞–π–¥–µ–Ω–æ`);
    }
    return null;
  }

  async aFillSurnameField(value: string): Promise<void> {
    const field = await this.aFindSurnameField();
    if (field) {
      await this.fieldUtils.fillSimpleTextField('surname', value, field);
    }
  }

  async aVerifySurnameField(expectedValue: string): Promise<boolean> {
    const field = await this.aFindSurnameField();
    if (field) {
      return await this.fieldUtils.verifySimpleTextField('surname', expectedValue, field);
    }
    return false;
  }

  async aFindMiddleAndGivenNameField(): Promise<Locator | null> {
    try {
      const count = await this.eMiddleAndGivenNameField.count();
      if (count > 0) {
        console.log(`‚úÖ [${this.fieldUtils.getFieldNumber('middleAndGivenName')}] –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª–µ middleAndGivenName`);
        return this.eMiddleAndGivenNameField;
      }
    } catch (error) {
      console.log(`‚ùå [${this.fieldUtils.getFieldNumber('middleAndGivenName')}] –ü–æ–ª–µ middleAndGivenName –Ω–µ –Ω–∞–π–¥–µ–Ω–æ`);
    }
    return null;
  }

  async aFillMiddleAndGivenNameField(value: string): Promise<void> {
    const field = await this.aFindMiddleAndGivenNameField();
    if (field) {
      await this.fieldUtils.fillSimpleTextField('middleAndGivenName', value, field);
    }
  }

  async aVerifyMiddleAndGivenNameField(expectedValue: string): Promise<boolean> {
    const field = await this.aFindMiddleAndGivenNameField();
    if (field) {
      return await this.fieldUtils.verifySimpleTextField('middleAndGivenName', expectedValue, field);
    }
    return false;
  }

  // –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ä–∞–¥–∏–æ –∫–Ω–æ–ø–∫–∞–º–∏ dateOfBirthType (–∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â—É—é –ª–æ–≥–∏–∫—É —Å –ª–æ–∫–∞—Ç–æ—Ä–∞–º–∏)
  async aFillDateOfBirthTypeField(dateType: string): Promise<void> {
    const radioLocators = {
      'Full': this.eDateOfBirthFullRadio,
      'Only year is known': this.eDateOfBirthYearOnlyRadio
    };
    await this.fieldUtils.fillRadioButtonGroup('dateOfBirthType', dateType, radioLocators);
  }

  async aVerifyDateOfBirthTypeField(expectedType: string): Promise<boolean> {
    const radioLocators = {
      'Full': this.eDateOfBirthFullRadio,
      'Only year is known': this.eDateOfBirthYearOnlyRadio
    };
    return await this.fieldUtils.verifyRadioButtonGroup('dateOfBirthType', expectedType, radioLocators);
  }

  // –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ä–∞–¥–∏–æ –∫–Ω–æ–ø–∫–∞–º–∏ hasOtherPassports (–∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â—É—é –ª–æ–≥–∏–∫—É —Å –ª–æ–∫–∞—Ç–æ—Ä–∞–º–∏)
  async aFillHasOtherPassportsField(value: string): Promise<void> {
    const radioLocators = {
      'Yes': this.eHasOtherPassportsYesRadio,
      'No': this.eHasOtherPassportsNoRadio
    };
    await this.fieldUtils.fillRadioButtonGroup('hasOtherPassports', value, radioLocators);
  }

  async aVerifyHasOtherPassportsField(expectedValue: string): Promise<boolean> {
    const radioLocators = {
      'Yes': this.eHasOtherPassportsYesRadio,
      'No': this.eHasOtherPassportsNoRadio
    };
    
    return await this.fieldUtils.verifyRadioButtonGroup('hasOtherPassports', expectedValue, radioLocators);
  }

  // === –ú–ï–¢–û–î–´ –î–õ–Ø –ü–û–õ–Ø SEX (–¢–ò–ü 2: –í–´–ü–ê–î–ê–Æ–©–ò–ô –°–ü–ò–°–û–ö) ===
  
  async aFindSexField(): Promise<Locator | null> {
    try {
      const count = await this.eSexSelect.count();
      if (count > 0) {
        console.log(`‚úÖ [${this.fieldUtils.getFieldNumber('sex')}] –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª–µ sex`);
        return this.eSexSelect;
      }
    } catch (error) {
      console.log(`‚ùå [${this.fieldUtils.getFieldNumber('sex')}] –ü–æ–ª–µ sex –Ω–µ –Ω–∞–π–¥–µ–Ω–æ`);
    }
    return null;
  }

  async aFillSexField(value: string): Promise<void> {
    const field = await this.aFindSexField();
    if (field) {
      await this.fieldUtils.fillDropdownSelect('sex', value, field);
    } else {
      console.log(`‚ùå [${this.fieldUtils.getFieldNumber('sex')}] –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª–µ sex –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è`);
    }
  }

  async aVerifySexField(expectedValue: string): Promise<boolean> {
    const field = await this.aFindSexField();
    if (field) {
      return await this.fieldUtils.verifyDropdownSelect('sex', expectedValue, field);
    } else {
      console.log(`‚ùå [${this.fieldUtils.getFieldNumber('sex')}] –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª–µ sex –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏`);
      return false;
    }
  }

  // === –ú–ï–¢–û–î–´ –î–õ–Ø –ü–û–õ–Ø NATIONALITY (–¢–ò–ü 3: –î–ò–ù–ê–ú–ò–ß–ï–°–ö–ò–ô –°–ü–ò–°–û–ö –° –ü–û–ò–°–ö–û–ú) ===
  
  async aFindNationalityField(): Promise<Locator | null> {
    try {
      const count = await this.eNationalitySelect.count();
      if (count > 0) {
        console.log(`‚úÖ [${this.fieldUtils.getFieldNumber('nationality')}] –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª–µ nationality`);
        return this.eNationalitySelect;
      }
    } catch (error) {
      console.log(`‚ùå [${this.fieldUtils.getFieldNumber('nationality')}] –ü–æ–ª–µ nationality –Ω–µ –Ω–∞–π–¥–µ–Ω–æ`);
    }
    return null;
  }

  async aFillNationalityField(value: string): Promise<void> {
    const field = await this.aFindNationalityField();
    if (field) {
      await this.fieldUtils.fillLargeDropdownSelect('nationality', value, field);
    } else {
      console.log(`‚ùå [${this.fieldUtils.getFieldNumber('nationality')}] –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª–µ nationality –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è`);
    }
  }

  async aVerifyNationalityField(expectedValue: string): Promise<boolean> {
    const field = await this.aFindNationalityField();
    if (field) {
      return await this.fieldUtils.verifyLargeDropdownSelect('nationality', expectedValue, field);
    } else {
      console.log(`‚ùå [${this.fieldUtils.getFieldNumber('nationality')}] –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª–µ nationality –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏`);
      return false;
    }
  }

  // === –ú–ï–¢–û–î–´ –î–õ–Ø 3. PASSPORT INFORMATION ===
  
  // === –ú–ï–¢–û–î–´ –î–õ–Ø –ü–û–õ–Ø PASSPORT TYPE (–¢–ò–ü 3: –î–ò–ù–ê–ú–ò–ß–ï–°–ö–ò–ô –°–ü–ò–°–û–ö –° –ü–û–ò–°–ö–û–ú) ===
  
  async aFindPassportTypeField(): Promise<Locator | null> {
    try {
      const count = await this.ePassportTypeSelect.count();
      if (count > 0) {
        console.log(`‚úÖ [${this.fieldUtils.getFieldNumber('type')}] –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª–µ passport type`);
        return this.ePassportTypeSelect;
      }
    } catch (error) {
      console.log(`‚ùå [${this.fieldUtils.getFieldNumber('type')}] –ü–æ–ª–µ passport type –Ω–µ –Ω–∞–π–¥–µ–Ω–æ`);
    }
    return null;
  }

  async aFillPassportTypeField(value: string): Promise<void> {
    const field = await this.aFindPassportTypeField();
    if (field) {
      await this.fieldUtils.fillLargeDropdownSelect('type', value, field);
    } else {
      console.log(`‚ùå [${this.fieldUtils.getFieldNumber('type')}] –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª–µ passport type –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è`);
    }
  }

  async aVerifyPassportTypeField(expectedValue: string): Promise<boolean> {
    const field = await this.aFindPassportTypeField();
    if (field) {
      return await this.fieldUtils.verifyLargeDropdownSelect('type', expectedValue, field);
    } else {
      console.log(`‚ùå [${this.fieldUtils.getFieldNumber('type')}] –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª–µ passport type –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏`);
      return false;
    }
  }

  // === –ú–ï–¢–û–î–´ –î–õ–Ø 5. OCCUPATION ===
  
  // === –ú–ï–¢–û–î–´ –î–õ–Ø –ü–û–õ–Ø OCCUPATION (–¢–ò–ü 2: –í–´–ü–ê–î–ê–Æ–©–ò–ô –°–ü–ò–°–û–ö) ===
  
  async aFindOccupationField(): Promise<Locator | null> {
    try {
      const count = await this.eOccupationSelect.count();
      if (count > 0) {
        console.log(`‚úÖ [${this.fieldUtils.getFieldNumber('occupation')}] –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª–µ occupation`);
        return this.eOccupationSelect;
      }
    } catch (error) {
      console.log(`‚ùå [${this.fieldUtils.getFieldNumber('occupation')}] –ü–æ–ª–µ occupation –Ω–µ –Ω–∞–π–¥–µ–Ω–æ`);
    }
    return null;
  }

  async aFillOccupationField(value: string): Promise<void> {
    const field = await this.aFindOccupationField();
    if (field) {
      await this.fieldUtils.fillDropdownSelect('occupation', value, field);
    } else {
      console.log(`‚ùå [${this.fieldUtils.getFieldNumber('occupation')}] –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª–µ occupation –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è`);
    }
  }

  async aVerifyOccupationField(expectedValue: string): Promise<boolean> {
    const field = await this.aFindOccupationField();
    if (field) {
      return await this.fieldUtils.verifyDropdownSelect('occupation', expectedValue, field);
    } else {
      console.log(`‚ùå [${this.fieldUtils.getFieldNumber('occupation')}] –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª–µ occupation –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏`);
      return false;
    }
  }
} 