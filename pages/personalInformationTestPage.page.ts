import { Page, Locator } from '@playwright/test';
import { FieldUtils } from '../utils/fieldUtils';

export class PersonalInformationTestPage {
  readonly page: Page;
  private fieldUtils: FieldUtils;

  // –õ–æ–∫–∞—Ç–æ—Ä—ã –ø–æ–ª–µ–π
  readonly eSurnameField: Locator;
  readonly eMiddleAndGivenNameField: Locator;
  readonly eDateOfBirthTypeField: Locator;

  constructor(page: Page) {
    this.page = page;
    this.fieldUtils = new FieldUtils(page);
    
    // –õ–æ–∫–∞—Ç–æ—Ä—ã –¥–ª—è –ø–æ–ª–µ–π
    this.eSurnameField = page.getByRole('textbox', { name: 'Surname (Last name)' });
    this.eMiddleAndGivenNameField = page.getByRole('textbox', { name: 'Middle and given name' });
    this.eDateOfBirthTypeField = page.getByRole('radio', { name: 'Full' });
  }

  /**
   * –ò—â–µ–º –ø–æ–ª–µ surname
   */
  async aFindSurnameField(): Promise<Locator | null> {
    const fieldNumber = this.fieldUtils.getFieldNumber('surname');
    
    try {
      const count = await this.eSurnameField.count();
      if (count > 0) {
        return this.eSurnameField;
      }
    } catch (error) {
      // –ü–æ–ª–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
    }
    
    console.log(`‚ùå [${fieldNumber}] –ü–æ–ª–µ Surname –Ω–µ –Ω–∞–π–¥–µ–Ω–æ`);
    return null;
  }

  /**
   * –ò—â–µ–º –ø–æ–ª–µ middleAndGivenName
   */
  async aFindMiddleAndGivenNameField(): Promise<Locator | null> {
    const fieldNumber = this.fieldUtils.getFieldNumber('middleAndGivenName');
    
    try {
      const count = await this.eMiddleAndGivenNameField.count();
      if (count > 0) {
        return this.eMiddleAndGivenNameField;
      }
    } catch (error) {
      // –ü–æ–ª–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
    }
    
    console.log(`‚ùå [${fieldNumber}] –ü–æ–ª–µ Middle and given name –Ω–µ –Ω–∞–π–¥–µ–Ω–æ`);
    return null;
  }
  
  /**
   * –ò—â–µ–º —Ä–∞–¥–∏–æ –∫–Ω–æ–ø–∫—É dateOfBirthType –ø–æ –∑–Ω–∞—á–µ–Ω–∏—é
   */
  async aFindDateOfBirthTypeRadioByValue(value: string): Promise<Locator | null> {
    const fieldNumber = this.fieldUtils.getFieldNumber('dateOfBirthType');
    
    // –ò—â–µ–º —Ä–∞–¥–∏–æ –∫–Ω–æ–ø–∫—É –ø–æ –∑–Ω–∞—á–µ–Ω–∏—é
    const radioButton = this.page.getByRole('radio', { name: value });
    
    try {
      const count = await radioButton.count();
      if (count > 0) {
        console.log(`‚úÖ [${fieldNumber}] –ù–∞–π–¥–µ–Ω–∞ —Ä–∞–¥–∏–æ –∫–Ω–æ–ø–∫–∞: ${value}`);
        return radioButton;
      }
    } catch (error) {
      console.log(`‚ùå [${fieldNumber}] –†–∞–¥–∏–æ –∫–Ω–æ–ø–∫–∞ "${value}" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
    }
    
    return null;
  }

  /**
   * –ó–∞–ø–æ–ª–Ω—è–µ–º –ø–æ–ª–µ surname (—Ç–∏–ø 1 - –ø—Ä–æ—Å—Ç–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ)
   */
  async aFillSurnameField(surname: string): Promise<void> {
    const surnameField = await this.aFindSurnameField();
    
    if (!surnameField) {
      throw new Error('–ü–æ–ª–µ Surname –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
    }
    
    await this.fieldUtils.fillSimpleTextField('surname', surname, surnameField);
  }

  /**
   * –ó–∞–ø–æ–ª–Ω—è–µ–º –ø–æ–ª–µ middleAndGivenName (—Ç–∏–ø 1 - –ø—Ä–æ—Å—Ç–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ)
   */
  async aFillMiddleAndGivenNameField(givenName: string): Promise<void> {
    const givenNameField = await this.aFindMiddleAndGivenNameField();
    
    if (!givenNameField) {
      throw new Error('–ü–æ–ª–µ Middle and given name –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
    }
    
    await this.fieldUtils.fillSimpleTextField('middleAndGivenName', givenName, givenNameField);
  }

  /**
   * –ó–∞–ø–æ–ª–Ω—è–µ–º –ø–æ–ª–µ dateOfBirthType (—Ç–∏–ø 6 - —Ä–∞–¥–∏–æ –∫–Ω–æ–ø–∫–∞)
   */
  async aFillDateOfBirthTypeField(dateType: string): Promise<void> {
    const fieldNumber = this.fieldUtils.getFieldNumber('dateOfBirthType');
    console.log(`üìù [${fieldNumber}] dateOfBirthType: ${dateType}`);
    
    try {
      // –ò—â–µ–º –æ–±–µ —Ä–∞–¥–∏–æ –∫–Ω–æ–ø–∫–∏
      const fullRadio = this.page.getByRole('radio', { name: 'Full' });
      const yearOnlyRadio = this.page.getByRole('radio', { name: 'Only year is known' });
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–∞–∫–∞—è –∫–Ω–æ–ø–∫–∞ —Å–µ–π—á–∞—Å –≤—ã–±—Ä–∞–Ω–∞
      const isFullSelected = await fullRadio.isChecked();
      const isYearOnlySelected = await yearOnlyRadio.isChecked();
      
      console.log(`üîç [${fieldNumber}] –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: Full=${isFullSelected}, Only year=${isYearOnlySelected}`);
      
      if (dateType === 'Full') {
        if (isFullSelected) {
          console.log(`‚úÖ [${fieldNumber}] –£–∂–µ –≤—ã–±—Ä–∞–Ω–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ: Full`);
          return;
        } else {
          console.log(`üîÑ [${fieldNumber}] –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –Ω–∞ Full`);
          await fullRadio.click();
        }
      } else if (dateType === 'Only year is known') {
        if (isYearOnlySelected) {
          console.log(`‚úÖ [${fieldNumber}] –£–∂–µ –≤—ã–±—Ä–∞–Ω–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ: Only year is known`);
          return;
        } else {
          console.log(`üîÑ [${fieldNumber}] –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –Ω–∞ Only year is known`);
          await yearOnlyRadio.click();
        }
      }
      
      console.log(`‚úÖ [${fieldNumber}] –í—ã–±—Ä–∞–Ω–æ: ${dateType}`);
    } catch (error) {
      const errorMessage = error instanceof Error ? error.message : String(error);
      console.log(`‚ùå [${fieldNumber}] –û—à–∏–±–∫–∞: ${errorMessage}`);
      throw error;
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª–µ surname –∑–∞–ø–æ–ª–Ω–µ–Ω–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ
   */
  async aVerifySurnameField(expectedSurname: string): Promise<boolean> {
    const surnameField = await this.aFindSurnameField();
    
    if (!surnameField) {
      return false;
    }
    
    return await this.fieldUtils.verifySimpleTextField('surname', expectedSurname, surnameField);
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª–µ middleAndGivenName –∑–∞–ø–æ–ª–Ω–µ–Ω–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ
   */
  async aVerifyMiddleAndGivenNameField(expectedGivenName: string): Promise<boolean> {
    const givenNameField = await this.aFindMiddleAndGivenNameField();
    
    if (!givenNameField) {
      return false;
    }
    
    return await this.fieldUtils.verifySimpleTextField('middleAndGivenName', expectedGivenName, givenNameField);
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª–µ dateOfBirthType –∑–∞–ø–æ–ª–Ω–µ–Ω–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ
   */
  async aVerifyDateOfBirthTypeField(expectedType: string): Promise<boolean> {
    const fieldNumber = this.fieldUtils.getFieldNumber('dateOfBirthType');
    
    try {
      // –ò—â–µ–º –æ–±–µ —Ä–∞–¥–∏–æ –∫–Ω–æ–ø–∫–∏
      const fullRadio = this.page.getByRole('radio', { name: 'Full' });
      const yearOnlyRadio = this.page.getByRole('radio', { name: 'Only year is known' });
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–∞–∫–∞—è –∫–Ω–æ–ø–∫–∞ –≤—ã–±—Ä–∞–Ω–∞
      const isFullSelected = await fullRadio.isChecked();
      const isYearOnlySelected = await yearOnlyRadio.isChecked();
      
      console.log(`üîç [${fieldNumber}] –ü—Ä–æ–≤–µ—Ä–∫–∞: Full=${isFullSelected}, Only year=${isYearOnlySelected}, –æ–∂–∏–¥–∞–µ—Ç—Å—è: ${expectedType}`);
      
      if (expectedType === 'Full' && isFullSelected) {
        console.log(`‚úÖ [${fieldNumber}] –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–π–¥–µ–Ω–∞: Full`);
        return true;
      } else if (expectedType === 'Only year is known' && isYearOnlySelected) {
        console.log(`‚úÖ [${fieldNumber}] –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–π–¥–µ–Ω–∞: Only year is known`);
        return true;
      } else {
        console.log(`‚ùå [${fieldNumber}] –ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: –æ–∂–∏–¥–∞–ª–æ—Å—å "${expectedType}", –≤—ã–±—Ä–∞–Ω–æ: Full=${isFullSelected}, Only year=${isYearOnlySelected}`);
        return false;
      }
    } catch (error) {
      console.log(`‚ùå [${fieldNumber}] –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: ${error}`);
      return false;
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
   */
  async aCheckEvisaPage(): Promise<void> {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É E-Visa...');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º URL
    const currentUrl = this.page.url();
    if (!currentUrl.includes('evisa.gov.vn/e-visa/foreigners')) {
      throw new Error(`‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞: ${currentUrl}`);
    }
    
    console.log('‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ E-Visa –Ω–∞–π–¥–µ–Ω–∞');
  }
} 